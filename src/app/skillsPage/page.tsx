"use client";

import ThumbUpAltIcon from "@mui/icons-material/ThumbUpAlt";
import ThumbDownOffAltIcon from "@mui/icons-material/ThumbDownOffAlt";
import { useState, useEffect } from "react";
import { useSelector, useDispatch } from "react-redux";
import { RootState } from "../slices/Store";
import {
  nextQuestion,
  finishQuiz,
  setAnswer,
  resetQuiz,
} from "../slices/quizSlice";
import { handleAchievement } from "../utils/handleAchievement";
import BASE_URL from "../utils/apiConfig";
import CardForTest from "../components/Card/CardForTest";
import SuccessModal from "../components/Modal/SuccessModal";

interface QuizType {
  id: number;
  question: string;
  options: string[];
  correctIndex: number;
}

const SkillsPage = () => {
  const [tests, setTests] = useState<QuizType[]>([]);
  const [seconds, setSeconds] = useState(0);
  const [started, setStarted] = useState(false);
  const [modalOpen, setModalOpen] = useState(false);
  const [isReplay, setIsReplay] = useState(false);

  // --- REDUX STATE ---
  const userId = useSelector((state: RootState) => state.user.userId); // id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userName = useSelector((state: RootState) => state.user.name); // –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const achievements = useSelector(
    (state: RootState) => state.user.achievements
  ); // –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const dispatch = useDispatch();
  const currentStep = useSelector((state: RootState) => state.quiz.currentStep); // –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
  const isFinished = useSelector((state: RootState) => state.quiz.isFinished); // –∑–∞–≤–µ—Ä—à—ë–Ω –ª–∏ –∫–≤–∏–∑
  const selectedAnswer = useSelector(
    (state: RootState) => state.quiz.selectedAnswer
  ); // –º–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤

  if (!userName || !userId) {
    return (
      <div className="text-center mt-20 p-8">
        <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <span className="text-2xl">üë§</span>
        </div>
        <h3 className="text-xl font-semibold text-gray-800 mb-2">
          –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
        </h3>
        <p className="text-gray-600">
          –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        </p>
      </div>
    );
  }

  // --- –ü–æ–±–æ—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç: –∑–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch(`${BASE_URL}/quiz`);
        if (!response.ok)
          throw new Error(`HTTP error! Status: ${response.status}`);
        const data: QuizType[] = await response.json();
        setTests(data);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
      }
    };
    fetchData();
  }, []);

  // --- –ü–æ–±–æ—á–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç: –∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–≤–∏–∑–∞ --
  useEffect(() => {
    let interval: NodeJS.Timeout | undefined;
    if (started && !isFinished) {
      interval = setInterval(() => {
        setSeconds((prev) => prev + 1);
      }, 1000);
    }
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [started, isFinished]);

  // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ (–º–º:—Å—Å) ---
  const formatTime = (totalSecond: number) => {
    const minutes = Math.floor(totalSecond / 60)
      .toString()
      .padStart(2, "0");
    const seconds = (totalSecond % 60).toString().padStart(2, "0");
    return `${minutes}:${seconds}`;
  };

  // --- –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ ---
  const correctCount = tests.reduce(
    (acc, test, idx) =>
      selectedAnswer[idx] === test.correctIndex ? acc + 1 : acc,
    0
  );
  const wrongCount = tests.length - correctCount;

  // —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–≥—Ä—ã –±–µ–∑ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤
  const handleAgainStart = () => {
    if (isFinished) {
      dispatch(resetQuiz());
      setStarted(true);
      setSeconds(0);
      setIsReplay(true);
    }
  };

  /**
   * –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–∏–∑:
   * - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç–∫—à–µ–Ω finishQuiz (–¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
   * - –Ω–∞—á–∏—Å–ª—è–µ—Ç –∞—á–∏–≤–∫—É –∏ –æ—á–∫–∏, –µ—Å–ª–∏ –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
   * - –Ω–∞—á–∏—Å–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –æ—á–∫–∏ –∑–∞ –ø–æ–ø—ã—Ç–∫—É, –µ—Å–ª–∏ –±—ã–ª–∏ –æ—à–∏–±–∫–∏
   * - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
   */
  const handleFinish = () => {
    dispatch(finishQuiz({ current: correctCount, incurrent: wrongCount }));

    const achievementsSafe = Array.isArray(achievements) ? achievements : [];
    const hasAchievement = achievementsSafe.some(
      (ach) => ach.title === "–ü—Ä–æ–π–¥–µ–Ω –º–∏–Ω–∏-–∫–≤–∏–∑"
    );

    if (!isReplay) {
      if (correctCount === tests.length && userId !== null && !hasAchievement) {
        // –í—Å–µ –æ—Ç–≤–µ—Ç—ã –≤–µ—Ä–Ω—ã –∏ –∞—á–∏–≤–∫–∏ –µ—â—ë –Ω–µ—Ç ‚Äî –¥–∞—ë–º –∞—á–∏–≤–∫—É –∏ 50 –æ—á–∫–æ–≤
        handleAchievement({
          userId: userId,
          dispatch,
          context: "–º–∏–Ω–∏-–∫–≤–∏–∑",
          mode: "quiz",
          isAdd: true,
        });
      } else if (userId !== null) {
        // –ï—Å—Ç—å –æ—à–∏–±–∫–∏ ‚Äî –¥–∞—ë–º —Ç–æ–ª—å–∫–æ 10 –æ—á–∫–æ–≤ –∑–∞ –ø–æ–ø—ã—Ç–∫—É (–∞—á–∏–≤–∫–∞ –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è)
        handleAchievement({
          userId: userId,
          dispatch,
          context: "–ü–æ–ø—ã—Ç–∫–∞ –º–∏–Ω–∏-–∫–≤–∏–∑",
          mode: "quizAttempt",
          isAdd: true,
          showCustomAlert: true,
        });
      }
      setIsReplay(true);
    }
    setModalOpen(true);
  };

  // --- –§–ª–∞–≥, —á—Ç–æ —Ç–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ –Ω–∞—á–∞—Ç –∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ---
  const quizStarted = started && tests.length > 0;

  return (
    <div className="min-h-screen bg-gray-50 flex flex-col items-center py-8 px-4">
      {/* –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å */}
      <div className="w-full max-w-4xl flex flex-row items-center justify-between bg-white rounded-xl shadow-md py-6 px-8 mb-6">
        <div className="flex flex-col gap-1">
          <div className="text-lg font-bold text-gray-800">
            –ò–º—è: <span className="font-bold text-black">{userName}</span>
          </div>
          <div className="flex gap-4 mt-1 text-sm">
            <span className="flex items-center gap-1 text-green-600">
              <ThumbUpAltIcon fontSize="small" /> –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ: {correctCount}
            </span>
            <span className="flex items-center gap-1 text-red-600">
              <ThumbDownOffAltIcon fontSize="small" /> –û—à–∏–±–∫–∏: {wrongCount}
            </span>
          </div>
        </div>
        <div className="flex items-center gap-6">
          <button
            type="button"
            className="text-gray-900 bg-white border border-gray-300 focus:outline-none
                hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 font-medium rounded-lg text-sm px-6 py-2 transition cursor-pointer"
            onClick={handleAgainStart}
          >
            –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
          </button>
          {!started && (
            <button
              type="button"
              disabled={isFinished}
              className="text-gray-900 bg-white border border-gray-300 focus:outline-none
                hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 font-medium rounded-lg text-sm px-6 py-2 transition cursor-pointer"
              onClick={() => {
                setStarted(true);
                setSeconds(0);
              }}
            >
              –ù–∞—á–∞—Ç—å
            </button>
          )}
          <div className="text-xl font-mono text-gray-700 border rounded-lg px-4 py-2 bg-gray-100">
            {formatTime(seconds)}
          </div>
        </div>
      </div>
      <div className="w-full max-w-4xl border-b border-gray-300 mb-6" />

      {/* –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å */}
      <main className="w-full max-w-4xl flex flex-col items-center gap-6">
        {!started ? (
          <div className="text-center text-gray-400 py-12">
            –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å", —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–µ—Å—Ç—ã
          </div>
        ) : tests.length === 0 ? (
          <div className="text-center text-gray-400 py-12">
            –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤...
          </div>
        ) : (
          <>
            <div className="w-full flex justify-center">
              <CardForTest
                question={tests[currentStep].question}
                answers={tests[currentStep].options.map((option, idx) => ({
                  text: option,
                  isCorrect: idx === tests[currentStep].correctIndex,
                }))}
                selected={selectedAnswer[currentStep] ?? null}
                onSelect={(idx) => dispatch(setAnswer(idx))}
              />
            </div>
            <div className="flex justify-center mt-4">
              {currentStep + 1 < tests.length ? (
                <button
                  className="bg-blue-500 text-white px-6 py-2 rounded-lg cursor-pointer"
                  onClick={() => dispatch(nextQuestion())}
                >
                  –î–∞–ª–µ–µ
                </button>
              ) : (
                <button
                  className="bg-green-600 text-white px-6 py-2 rounded-lg cursor-pointer"
                  disabled={isFinished}
                  onClick={handleFinish}
                >
                  –ó–∞–≤–µ—Ä—à–∏—Ç—å
                </button>
              )}
            </div>
          </>
        )}
      </main>
      <SuccessModal
        open={modalOpen}
        onClose={() => setModalOpen(false)}
        isSuccess={correctCount === tests.length}
        title={
          correctCount === tests.length
            ? "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞!"
            : "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω"
        }
        description={
          correctCount === tests.length
            ? `–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!`
            : `–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ ${correctCount} –∏–∑ ${tests.length} –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!`
        }
      />
    </div>
  );
};

export default SkillsPage;
