"use client";

import { useState, useEffect } from "react";
import { useDispatch, useSelector } from "react-redux";
import NameInputModal from "../Modal/NameInputModal";
import ModalInfo from "../Modal/ModalInfo";
import FutureStack from "../FutureStack/FutureStack";
import { handleAchievement } from "@/app/utils/handleAchievement";
import BASE_URL from "@/app/utils/apiConfig";
import { addClickedTech } from "@/app/slices/userSlice";
import { RootState } from "@/app/slices/Store";
import Link from "next/link";

interface InfoItem {
  id: number;
  title: string;
  description: string;
  type: string;
}

const clueMessage = [
  "üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è, –∏ –∏–≥—Ä–∞ –Ω–∞—á–Ω—ë—Ç—Å—è!",
  "üëâ –ò—Å—Å–ª–µ–¥—É–π —Å–∞–π—Ç ‚Äî –∫–ª–∏–∫–∞–π –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –ø—Ä–æ–µ–∫—Ç—ã.",
  "üèÜ –ó–∞–≥–ª—è–Ω–∏ –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ‚Äî —Ç–∞–º –∂–¥—É—Ç –Ω–∞–≥—Ä–∞–¥—ã!",
  "üí¨ –û—Å—Ç–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
  "üöÄ –ì–æ—Ç–æ–≤? –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!",
];

const HomeComponents: React.FC = () => {
  const [openModal, setOpenModal] = useState(false);
  const [selectedTech, setSelectedTech] = useState<InfoItem | null>(null);
  const [infoData, setInfoData] = useState<InfoItem[]>([]);
  const [showMessage, setShowMessage] = useState(false);
  const [messageIndex, setMessageIndex] = useState(0);

  const userId = useSelector((state: RootState) => state.user.userId);
  const clickedTechs = useSelector(
    (state: RootState) => state.user.clickedTechs
  );
  const dispatch = useDispatch();

  // useEffect –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
  useEffect(() => {
    const interval = setInterval(() => {
      setShowMessage(true);
      setTimeout(() => {
        setShowMessage(false);
        // –ú–µ–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï —Å–∫—Ä—ã—Ç–∏—è (—á–µ—Ä–µ–∑ –¥–æ–ø. –∑–∞–¥–µ—Ä–∂–∫—É)
        setTimeout(() => {
          setMessageIndex((prev) => (prev + 1) % clueMessage.length);
        }, 700);
      }, 2500);
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ db.json
  useEffect(() => {
    const fetchData = async () => {
      try {
        const res = await fetch(`${BASE_URL}/info`);
        if (!res.ok) {
          throw new Error(`HTTP error! Status: ${res.status}`);
        }
        const data: InfoItem[] = await res.json();
        if (data && Array.isArray(data)) {
          setInfoData(data); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        } else {
          console.error("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º.");
        }
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
      }
    };

    fetchData();
  }, []);

  const handleOpenModal = () => {
    setOpenModal(true);
    if (!clickedTechs.includes("–ù–∞—á–∞—Ç—å")) {
      dispatch(addClickedTech("–ù–∞—á–∞—Ç—å"));
    }
  };

  const handleClose = () => {
    setOpenModal(false);
    setSelectedTech(null);
  };

  // –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª–∫—É –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –∞—á–∏–≤–∫—É
  const handleTechInfoClick = async (item: InfoItem) => {
    setSelectedTech(item);
    if (userId) {
      await handleAchievement({
        userId,
        dispatch,
        context: item.title,
        mode: "learn",
        isAdd: true,
        clickedTechs,
      });
    }
  };

  // –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
  const handleProjectClick = async (projectTitle: string) => {
    if (!userId) return;
    await handleAchievement({
      userId,
      dispatch,
      context: projectTitle,
      mode: "visit",
      isAdd: true,
      clickedTechs,
      showCustomAlert: false,
    });
  };

  return (
    <main className="min-h-screen bg-gray-100 flex flex-col items-center justify-center px-6">
      {/* Hero Section */}
      <section className="w-full max-w-6xl flex flex-col md:flex-row items-center gap-12 py-20">
        {/* Image */}
        <div className="w-full ml-3.5 md:w-1/2 h-80 bg-white rounded-xl shadow-lg overflow-hidden group">
          <div
            className="h-full w-full bg-cover bg-center group-hover:filter-none filter grayscale transition-all duration-300"
            style={{
              backgroundImage: "url('/work.jpg')",
            }}
          ></div>
        </div>
        {/* Info */}
        <div className="w-full md:w-1/2 text-center md:text-left">
          <h1 className="text-4xl font-bold text-gray-900">–ê–Ω–¥—Ä–µ–π</h1>
          <p className="mt-4 text-gray-600 text-lg">
            –ü—Ä–µ–≤—Ä–∞—â–∞—é –∏–¥–µ–∏ –≤ —Ü–∏—Ñ—Ä–æ–≤—É—é —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∫–æ–¥. –≠—Ç–æ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ ‚Äî
            –∂–∏–≤–æ–µ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –º–æ–µ–≥–æ –ø—É—Ç–∏ –≤ frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –≥–¥–µ –∫–∞–∂–¥—ã–π
            –ø—Ä–æ–µ–∫—Ç –æ—Ç—Ä–∞–∂–∞–µ—Ç –æ—Å–≤–æ–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫.
          </p>
          <button
            onClick={handleOpenModal}
            className="mt-4  inline-block w-full px-8 py-3 border-2 border-black rounded-xl font-semibold transition-all duration-300 relative overflow-hidden group cursor-pointer text-black"
          >
            <span className="absolute inset-0 bg-black w-0 group-hover:w-full transition-all duration-700"></span>
            <span
              className={`relative z-10  ${
                userId && clickedTechs.includes("–ù–∞—á–∞—Ç—å")
                  ? "text-green-600"
                  : "group-hover:text-white"
              }`}
            >
              –ù–∞—á–∞—Ç—å
            </span>
          </button>
          <div
            className={`
             mt-6
             px-6 py-3 rounded-xl
             bg-[#23272f] 
             text-[#868580] 
             text-lg font-bold shadow 
            transition-opacity duration-700
             ${showMessage ? "opacity-100" : "opacity-0 pointer-events-none"}
            `}
            style={{ minWidth: 260, textAlign: "center" }}
          >
            {clueMessage[messageIndex]}
          </div>
        </div>
      </section>
      {/* –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ */}
      <section className="w-full py-10 rounded-xl shadow-md overflow-hidden">
        <div className="w-full flex whitespace-nowrap overflow-hidden relative">
          <div className="flex space-x-4 cursor-pointer mr-1 animate-marquee">
            {infoData.map((item) => (
              <p
                key={item.id}
                className={`text-3xl font-bold ml-1 transition px-4 ${
                  userId && clickedTechs.includes(item.title)
                    ? "text-green-600"
                    : "text-gray-900 hover:text-indigo-600"
                }`}
                onClick={() => handleTechInfoClick(item)}
              >
                {item.title}
              </p>
            ))}
          </div>
        </div>
      </section>
      <style jsx>{`
        @keyframes marquee {
          from {
            transform: translateX(-100%);
          }
          to {
            transform: translateX(100%);
          }
        }
        .animate-marquee {
          animation: marquee 20s linear infinite;
        }
      `}</style>
      <section className="w-full bg-white mt-2 max-w-full flex flex-col items-center gap-12 py-4">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <h2 className="text-3xl font-bold text-gray-900 text-center w-full">
          –ü—Ä–æ–µ–∫—Ç—ã
        </h2>
        {/* –ü—Ä–æ–µ–∫—Ç 1 */}
        <div className="w-full flex flex-col md:flex-row items-center gap-12 ">
          {/* –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º */}
          <div className="w-full ml-3.5 md:w-1/2 h-80 rounded-xl shadow-lg overflow-hidden relative">
            <div
              style={{
                backgroundImage: "url('/program2.jpg')",
                backgroundSize: "cover",
                backgroundPosition: "center",
              }}
              className="absolute inset-0 opacity-100"
            ></div>
            {/* –¢–µ–º–Ω—ã–π –æ–≤–µ—Ä–ª–µ–π */}
            <div className="absolute inset-0 bg-[#272727]/60"></div>
            <h2 className="absolute inset-0 text-5xl sm:text-7xl md:text-9xl font-bold text-gray-300 uppercase flex items-center justify-center">
              InfoNews
            </h2>
          </div>
          {/* –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ */}
          <div className="w-full md:w-1/2 text-center md:text-left mt-6 md:mt-0">
            <h1 className="text-2xl  font-bold text-gray-900">InfoNews</h1>
            <p className="mt-4 text-gray-600 text-lg">
              –í —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ —è –ø–æ–ª—É—á–∞—é API. –¢–∞–º –∏–º–µ–µ—Ç—Å—è –ø–æ–≥–æ–¥–∞, –±–∏—Ä–∂–∞ –∏ –¥–∞–∂–µ
              –º–∏–Ω–∏ –∏–≥—Ä–∞.
            </p>
            <button className="mt-4 inline-block px-8 py-3 border-2 border-black rounded-xl font-semibold transition-all duration-300 relative overflow-hidden group cursor-pointer text-black">
              <span className="absolute inset-0 bg-black w-0 group-hover:w-full transition-all duration-700"></span>
              <Link
                href="/InfoNews"
                onClick={() => {
                  handleProjectClick("InfoNews");
                }}
                className={`relative z-10 ${
                  clickedTechs.includes("InfoNews")
                    ? "text-green-600"
                    : "group-hover:text-white"
                }`}
              >
                –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–µ–∫—Ç
              </Link>
            </button>
          </div>
        </div>
        {/* –ü—Ä–æ–µ–∫—Ç 2 */}
        <div className="w-full flex flex-col md:flex-row items-center gap-12 mb-12">
          {/* –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º */}
          <div className="w-full ml-3.5 md:w-1/2 h-80 rounded-xl shadow-lg overflow-hidden relative">
            <div
              style={{
                backgroundImage: "url('/program.jpg')",
                backgroundSize: "cover",
                backgroundPosition: "center",
              }}
              className="absolute inset-0 opacity-100"
            ></div>
            {/* –¢–µ–º–Ω—ã–π –æ–≤–µ—Ä–ª–µ–π */}
            <div className="absolute inset-0 bg-[#272727]/60"></div>
            <h2 className="absolute inset-0 text-5xl sm:text-7xl md:text-9xl font-bold text-gray-300 uppercase flex items-center justify-center">
              MaryShop
            </h2>
          </div>
          {/* –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ */}
          <div className="w-full md:w-1/2 text-center md:text-left mt-6 md:mt-0">
            <h1 className="text-2xl font-bold text-gray-900">Maryshop</h1>
            <p className="mt-4 text-gray-600 text-lg">
              –í —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ - –∫–æ—Ä–∑–∏–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤. –¢—É—Ç –µ—Å—Ç—å –∏
              —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, —Ç–∞–∫ –∂–µ –µ—Å—Ç—å JSON-server. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑
              –∫–æ—Ä–∑–∏–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤.
            </p>
            <button className="mt-4 inline-block px-8 py-3 border-2 border-black rounded-xl font-semibold transition-all duration-300 relative overflow-hidden group cursor-pointer text-black">
              <span className="absolute inset-0 bg-black w-0 group-hover:w-full transition-all duration-700"></span>
              <Link
                href="/Maryshop"
                onClick={() => {
                  handleProjectClick("Maryshop");
                }}
                className={`relative z-10 ${
                  clickedTechs.includes("Maryshop")
                    ? "text-green-600"
                    : "group-hover:text-white"
                }`}
              >
                –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–µ–∫—Ç
              </Link>
            </button>
          </div>
        </div>
        {/* –ü—Ä–æ–µ–∫—Ç 3 */}
        <div className="w-full flex flex-col md:flex-row items-center gap-12 mb-12">
          {/* –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º */}
          <div className="w-full ml-3.5 md:w-1/2 h-80 rounded-xl shadow-lg overflow-hidden relative">
            <div
              style={{
                backgroundImage: "url('/work.jpg')",
                backgroundSize: "cover",
                backgroundPosition: "center",
              }}
              className="absolute inset-0 opacity-100"
            ></div>
            {/* –¢–µ–º–Ω—ã–π –æ–≤–µ—Ä–ª–µ–π */}
            <div className="absolute inset-0 bg-[#272727]/60"></div>
            <h2 className="absolute inset-0 text-5xl sm:text-7xl md:text-9xl font-bold text-gray-300 uppercase flex items-center justify-center">
              GreenPulse
            </h2>
          </div>
          {/* –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ */}
          <div className="w-full md:w-1/2 text-center md:text-left mt-6 md:mt-0">
            <h1 className="text-2xl font-bold text-gray-900">Green_pulse</h1>
            <p className="mt-4 text-gray-600 text-lg">
              –ê –≤ —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ, —è —Å –∫–æ–ª–ª–µ–≥–æ–π —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ
              –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ –≤–æ–∑–¥—É—Ö–∞.
            </p>
            <button className="mt-4 inline-block px-8 py-3 border-2 border-black rounded-xl font-semibold transition-all duration-300 relative overflow-hidden group cursor-pointer text-black">
              <span className="absolute inset-0 bg-black w-0 group-hover:w-full transition-all duration-700"></span>
              <Link
                href="/GreenPulse"
                onClick={() => {
                  handleProjectClick("Green_pulse");
                }}
                className={`relative z-10 ${
                  clickedTechs.includes("Green_pulse")
                    ? "text-green-600"
                    : "group-hover:text-white"
                }`}
              >
                –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–µ–∫—Ç
              </Link>
            </button>
          </div>
        </div>
      </section>
      <section className="w-full max-w-[1260px] mx-auto py-3">
        <FutureStack />
      </section>
      <NameInputModal open={openModal} onClose={handleClose} />
      {selectedTech && (
        <ModalInfo
          key={selectedTech.title}
          title={selectedTech.title}
          description={selectedTech.description}
          onClose={handleClose}
        />
      )}
    </main>
  );
};

export default HomeComponents;
